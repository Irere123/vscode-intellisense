{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Kin Programming Language",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#methods"
    },
    {
      "include": "#grammar"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.kinlang",
          "match": "\\b(reka|ntahinduka|porogaramu_ntoya|tanga|subiramo_niba|niba|nanone_niba|niba_byanze)\\b"
        },
        {
          "name": "keyword.constant.kinlang",
          "match": "\\b(ubusa|nibyo|sibyo|ikosa)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.kinlang",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.kinlang",
          "match": "\\\\."
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.declaration.kinlang",
          "match": "\\b(reka|ntahinduka)\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*(=\\s*\\b.*\\b)?\\s*;?"
        }
      ]
    },
    "methods": {
      "patterns": [
        {
          "name": "method.kinlang",
          "match": "\\b(KIN_AMAGAMBO\\.huza|KIN_AMAGAMBO\\.ingano|KIN_AMAGAMBO\\.tandukanya|KIN_AMAGAMBO\\.inyuguti_nkuru|KIN_AMAGAMBO\\.inyuguti_ntoya|KIN_URUTONDE\\.ifite|KIN_URUTONDE\\.kora_ijambo|KIN_AMAGAMBO\\.ingano|KIN_INYANDIKO\\.andika|KIN_INYANDIKO\\.soma|KIN_INYANDIKO\\.vugurura|KIN_INYANDIKO\\.siba|KIN_IGIHE\\.isaha|KIN_IGIHE\\.umunsi|KIN_IGIHE\\.itariki|KIN_IMIBARE\\.pi|KIN_IMIBARE\\.umubare_utazwi|KIN_IMIBARE\\.kuraho_ibice|KIN_IMIBARE\\.umuzikare|KIN_IMIBARE\\.sin|KIN_IMIBARE\\.cos|KIN_IMIBARE\\.tan)\\b\\s*\\([^)]*\\)\\s*->\\s*\\b.*\\b\\s*"
        }
      ]
    },
    "grammar": {
      "patterns": [
        {
          "name": "program.kinlang",
          "begin": "\\b(program)\\b",
          "end": "$",
          "patterns": [
            {
              "include": "#statement"
            }
          ]
        },
        {
          "name": "statement.kinlang",
          "begin": "\\b(statement)\\b",
          "end": ";?",
          "patterns": [
            {
              "include": "#variableDeclaration"
            },
            {
              "include": "#functionDeclaration"
            },
            {
              "include": "#loopStatement"
            },
            {
              "include": "#conditionalStatement"
            },
            {
              "include": "#expressionStatement"
            },
            {
              "include": "#returnStatement"
            }
          ]
        },
        {
          "name": "variableDeclaration.kinlang",
          "begin": "\\b(reka|ntahinduka)\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*(=\\s*\\b.*\\b)?"
        },
        {
          "name": "functionDeclaration.kinlang",
          "begin": "\\b(porogaramu_ntoya)\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\([^)]*\\)\\s*\\{",
          "end": "\\}"
        },
        {
          "name": "loopStatement.kinlang",
          "begin": "\\b(subiramo_niba)\\b\\s*\\(.*\\)\\s*\\{",
          "end": "\\}"
        },
        {
          "name": "conditionalStatement.kinlang",
          "begin": "\\b(niba)\\b\\s*\\(.*\\)\\s*\\{",
          "end": "\\}",
          "patterns": [
            {
              "begin": "\\b(nanone_niba)\\b\\s*\\(.*\\)\\s*\\{",
              "end": "\\}"
            },
            {
              "begin": "\\b(niba_byanze)\\b\\s*\\{",
              "end": "\\}"
            }
          ]
        },
        {
          "name": "expressionStatement.kinlang",
          "include": "#expression"
        },
        {
          "name": "returnStatement.kinlang",
          "begin": "\\b(tanga)\\b\\s*(\\b.*\\b)?\\s*",
          "end": ";?",
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "include": "#expression"
        },
        {
          "name": "assignmentExpression.kinlang",
          "begin": "\\b(.*\\b=)\\b"
        },
        {
          "name": "objectLiteral.kinlang",
          "begin": "\\b(\\{)\\b",
          "end": "\\}"
        },
        {
          "name": "arrayExpression.kinlang",
          "begin": "\\b(\\[)\\b",
          "end": "\\]"
        },
        {
          "name": "primaryExpression.kinlang",
          "begin": "\\b(identifier|numericLiteral|stringLiteral|\\(.*\\)|functionReturn)\\b"
        },
        {
          "name": "identifier.kinlang",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
        },
        {
          "name": "numericLiteral.kinlang",
          "match": "\\b([0-9]+(\\.[0-9]+)?)\\b"
        },
        {
          "name": "stringLiteral.kinlang",
          "match": "\".*\""
        }
      ]
    }
  },
  "scopeName": "source.kin"
}
